/**

@page faq Frequently Asked Questions

The section outlines some answers to some frequently asked questions.


### Q. Can Libxlsxwriter use an existing Excel file as a template?

No.

Libxlsxwriter is designed only as a file *writer*. It cannot read or modify
an existing Excel file.


### Q. Why do my formulas show a zero result in some, non-Excel applications?

Due to wide range of possible formulas and inter-dependencies between them
`libxlsxwriter` doesn't, and realistically cannot, calculate the result of a
formula when it is written to an XLSX file. Instead, it stores the value 0 as
the formula result. It then sets a global flag in the XLSX file to say that
all formulas and functions should be recalculated when the file is opened.

This is the method recommended in the Excel documentation and in general it
works fine with spreadsheet applications. However, applications that don't
have a facility to calculate formulas, such as Excel Viewer, or several mobile
applications, will only display the 0 results.

If required, it is also possible to specify the calculated result of the
formula using the worksheet_write_formula_num() function.


### Q. Can I apply a format to a range of cells in one go?

Currently no. However, it is a planned features to allow cell formats
and data to be written separately.


### Q. Is Visual C++ on Windows supported?

Yes. See @ref getting_started.


### Q. Is feature X supported or will it be supported?

All supported features are documented. In time the feature set may expand to
include more of the functionality of the [Python
XlsxWriter](http://xlsxwriter.readthedocs.org) module.


### Q. Is there an "AutoFit" option for columns?

Unfortunately, there is no way to specify "AutoFit" for a column in the
Excel file format. This feature is only available at runtime from within
Excel. It is possible to simulate "AutoFit" by tracking the width of the
data in the column as your write it.


### Q. Do people actually ask these questions frequently, or at all?

Apart from this question, yes.

Next: @ref bugs

*/
